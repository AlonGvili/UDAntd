{"version":3,"sources":["webpack://Antd/./components/input/input.jsx"],"names":["AntdInput","props","useDashboardEvent","id","state","attributes","content","inputRef","useRef","prefix_suffix","prefix","UniversalDashboard","renderComponent","suffix","addons","addonBefore","type","addonAfter","onChange","event","console","log","target","value","publish","eventId","eventName","eventData","JSON","stringify","onPressEnter","current","input","offsetParent","childNodes","children","ref"],"mappings":"41BAqEeA,UAjEG,SAAAC,GAAS,QACDC,YAAkBD,EAAME,GAAIF,GAD3B,GAClBG,EADkB,KAERC,GAFQ,KAEOD,EAAxBE,QAAwBF,EAAfC,YAEXE,EAAWC,mBA6BXC,EAAgB,CACpBC,OAAQC,mBAAmBC,gBAAgBP,EAAWK,QACtDG,OAAQF,mBAAmBC,gBAAgBP,EAAWQ,SAGlDC,EAAS,CACbC,YAC6B,OAA3BV,EAAWU,YACPV,EAAWU,YAAYC,KACrBL,mBAAmBC,gBAAgBP,EAAWU,aAC9CV,EAAWU,YACb,KACNE,WAC4B,OAA1BZ,EAAWY,WACPZ,EAAWY,WAAWD,KACpBL,mBAAmBC,gBAAgBP,EAAWY,YAC9CZ,EAAWY,WACb,MAGR,OACE,2BACMZ,EACAS,EACAL,EAHN,CAIES,SAAU,SAAAC,GAAK,OApDF,SAAAA,GACfC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBZ,mBAAmBa,QAAQ,gBAAiB,CAC1CR,KAAM,cACNS,QAASpB,EAAWF,GAAK,WACzBuB,UAAW,WACXC,UAAWC,KAAKC,UAAUV,EAAMG,OAAOC,SA8CpBL,CAASC,IAC5BW,aAAc,SAAAX,GAAK,OA1CrBC,QAAQC,IACN,kBACAd,EAASwB,QAAQC,MAAMC,aAAaC,WAAW,GAAGD,aAC/CA,aAAaE,eAElBxB,mBAAmBa,QAAQ,gBAAiB,CAC1CR,KAAM,cACNS,QAASpB,EAAWF,GAAK,eACzBuB,UAAW,eACXC,UAAW,MAkCXS,IAAK7B","file":"AntdInput.0420d96d00c71e117719.bundle.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Input } from \"antd\";\r\nimport useDashboardEvent from \"../Hooks/useDashboardEvent\";\r\n\r\nconst AntdInput = props => {\r\n  const [state, reload] = useDashboardEvent(props.id, props);\r\n  const { content, attributes } = state;\r\n\r\n  const inputRef = useRef();\r\n\r\n  const onChange = event => {\r\n    console.log(event.target.value);\r\n    UniversalDashboard.publish(\"element-event\", {\r\n      type: \"clientEvent\",\r\n      eventId: attributes.id + \"onChange\",\r\n      eventName: \"onChange\",\r\n      eventData: JSON.stringify(event.target.value)\r\n    });\r\n  };\r\n\r\n  const onPressEnter = event => {\r\n    console.log(\r\n      \"parent&children\",\r\n      inputRef.current.input.offsetParent.childNodes[0].offsetParent\r\n        .offsetParent.children\r\n    );\r\n    UniversalDashboard.publish(\"element-event\", {\r\n      type: \"clientEvent\",\r\n      eventId: attributes.id + \"onPressEnter\",\r\n      eventName: \"onPressEnter\",\r\n      eventData: \"\" // JSON.stringify(\r\n        //inputRef.current.input.offsetParent.childNodes[0].offsetParent\r\n          //.offsetParent.children\r\n      //)\r\n    });\r\n  };\r\n\r\n  const prefix_suffix = {\r\n    prefix: UniversalDashboard.renderComponent(attributes.prefix),\r\n    suffix: UniversalDashboard.renderComponent(attributes.suffix)\r\n  };\r\n\r\n  const addons = {\r\n    addonBefore:\r\n      attributes.addonBefore !== null\r\n        ? attributes.addonBefore.type\r\n          ? UniversalDashboard.renderComponent(attributes.addonBefore)\r\n          : attributes.addonBefore\r\n        : null,\r\n    addonAfter:\r\n      attributes.addonAfter !== null\r\n        ? attributes.addonAfter.type\r\n          ? UniversalDashboard.renderComponent(attributes.addonAfter)\r\n          : attributes.addonAfter\r\n        : null\r\n  };\r\n\r\n  return (\r\n    <Input\r\n      {...attributes}\r\n      {...addons}\r\n      {...prefix_suffix}\r\n      onChange={event => onChange(event)}\r\n      onPressEnter={event => onPressEnter(event)}\r\n      ref={inputRef}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AntdInput;\r\n"],"sourceRoot":""}